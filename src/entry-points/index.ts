import { app, BrowserWindow, session } from "electron";
import { ipcMain } from "electron-typescript-ipc";
import fs from 'fs'
import path from "path";

import dotenv from 'dotenv'
dotenv.config()
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).

declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}

import { spawn, fork, exec, spawnSync, execFile } from "child_process";
import { Api, DownloadProps, ISearchScenesFilter } from "../tools/ElectronApi";
// import { checkDates, getDownloadDS, searchScenes } from "../backend/usgs-api";
import type { DisplayId, ISceneState, USGSLayerType } from "../actions/main-actions";
import { FsWatcher } from "../backend/fs-watcher";

const fsWatcher = new FsWatcher(app)

const createWindow = async () => {
  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: Object.assign(
        {
          "Content-Security-Policy": [
            "style-src-elem 'https://api.mapbox.com' 'unsafe-inline'",
          ],
        },
        details.responseHeaders
      ),
    });
  });
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    title: "USGS Loader",
    height: 600,
    titleBarStyle: 'hidden',
    // resizable: false,
    // roundedCorners: true,
    // frame: false,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      webSecurity: false
    },
  });

  fsWatcher.setMainWindow(mainWindow)

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();

  ipcMain.handle<Api>('openExplorer', async (_, path_: string) => {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const appdataPath = path.join(app.getPath('userData'), 'localStorage')
    spawn(`explorer`, [
      `/select,"${path.join(appdataPath, path_)}"`
    ], { windowsVerbatimArguments: true });
  });


  ipcMain.handle<Api>('watch', async () => {
    return fsWatcher.getState()
  });

  ipcMain.handle<Api>('download', async (_, {displayId, ds}: DownloadProps) => {
    // TODO: implement threading
    const appdataPath = path.join(app.getPath('userData'), 'localStorage')
    const scenePath = path.join(appdataPath, displayId)
    if (!fs.existsSync(scenePath)){
      fs.mkdirSync(scenePath, { recursive: true });
    }
    const indexFilePath = path.join(scenePath, 'index.json')
    let sceneState: ISceneState = {
      stillLoading: true,
      calculation: 0,
      donwloadedFiles: {},
      calculated: false,
    }
    console.log('ds',ds)
    ds.forEach((dsItem) => {
      sceneState.donwloadedFiles[dsItem.layerName] = {
        url: dsItem.url,
        loaded: false,
        progress: 0,
      }
    })
    
    console.log(sceneState)
    fs.writeFileSync(indexFilePath, JSON.stringify(sceneState, null, 2))

    const downloadingProcess = exec(`start ./src/tasks/download-scene-task.exe "${scenePath}"`, (...args: any) => {
      console.log('download', scenePath, JSON.stringify(args, null, 2))
    })
    sceneState.downloadPid = downloadingProcess.pid
    fs.writeFileSync(indexFilePath, JSON.stringify(sceneState, null, 2))
    await new Promise<void>(resolve => {
      downloadingProcess.addListener('close', (message) => {
        console.log('exit with message: ', message)
        sceneState = JSON.parse(fs.readFileSync(indexFilePath).toString())
        sceneState.downloadPid = undefined
        sceneState.stillLoading = false
        fs.writeFileSync(indexFilePath, JSON.stringify(sceneState, null, 2))
        resolve()
      })
    })

    const calculationProcess = exec(`start ./src/tasks/main.exe "${scenePath}"`, (...args: any) => {
      console.log('calculate', scenePath, JSON.stringify(args, null, 2))
    })
    sceneState.calculationPid = calculationProcess.pid
    fs.writeFileSync(indexFilePath, JSON.stringify(sceneState, null, 2))
    calculationProcess.addListener('close', (message) => {
      console.log('exit with message: ', message)
      sceneState = JSON.parse(fs.readFileSync(indexFilePath).toString())
      sceneState.calculationPid = undefined
      sceneState.calculated = true
      fs.writeFileSync(indexFilePath, JSON.stringify(sceneState, null, 2))
    })
  });
  
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
/** window initialization */
app.on("window-all-closed", async () => {
  // eslint-disable-next-line no-constant-condition
  while(true){
    if (!(await fsWatcher.stillWorking())) {
      break
    }
    await new Promise((resolve) => setTimeout(resolve, 5000))
  }
  app.quit();
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
