import { app, BrowserWindow, session } from "electron";
import { ipcMain } from "electron-typescript-ipc";
import path from "path";
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).

// const server = require('../server/app');

declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// const axiosInstance = axios.create({ baseURL: USGS_API_URL });

// const createSession = async () => {
//   console.log("create session");

//   const authParams = {
//     username,
//     password
//   };
//   const resp = await axios.post(`${USGS_API_URL}/login`, authParams);
//   // const [cookie] = resp.headers["set-cookie"]; // getting cookie from request
//   // axiosInstance.defaults.headers.Cookie = cookie; // attaching cookie to axiosInstance for future requests
//   // return cookie; // return Promise<cookie> because func is async
// };

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}

import { spawn } from "child_process";
import { Api, ISearchScenesFilter } from "../tools/ElectronApi";
import { checkDates, searchScenes } from "../backend/usgs-api";

const createWindow = async () => {
  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: Object.assign(
        {
          "Content-Security-Policy": [
            "style-src-elem 'https://api.mapbox.com' 'unsafe-inline'",
          ],
        },
        details.responseHeaders
      ),
    });
  });
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    title: "USGS Loader",
    height: 600,
    titleBarStyle: 'hidden',
    // resizable: false,
    // roundedCorners: true,
    // frame: false,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();

  ipcMain.handle<Api>('openExplorer', async (_, path_: string) => {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const appDataDir = path.join(require('os').homedir(),'USGS_Loader')
    spawn(`explorer`, [
      `/select,"${path.join(appDataDir, path_)}"`
    ], { windowsVerbatimArguments: true });
    // spawn("explorer", [`"C:/Program Files/USGS_loader/server/${path}"`]);
  });


  ipcMain.handle<Api>('searchScenes', async(_, {startDate, endDate, bounds}: ISearchScenesFilter) => {
    return searchScenes({startDate, endDate, bounds})
  })

  ipcMain.handle<Api>('watch', async () => {
    // const gdal = require('gdal');
    // const dataset = gdal.open("C:\\Users\\shkid\\Desktop\\uhi disser\\first manual test\\LC08_L2SP_135024_20220202_20220211_02_T1\\LC08_L2SP_135024_20220202_20220211_02_T1_QA_RADSAT.TIF");
    // var layer = dataset.layers.get(0);
    // document.write('The shapefile has: ' + layer.features.count() + ' features.');
  });

  const lastDatePromise = checkDates()
  let lastDate: string

  ipcMain.handle<Api>('checkLastDate', async () => {
    if (!lastDate) {
      lastDate = await lastDatePromise
    }
    return lastDate
  });
  
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
/** window initialization */
app.on("window-all-closed", () => {
  app.quit();
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
