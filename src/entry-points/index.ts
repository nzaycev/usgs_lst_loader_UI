import { app, BrowserWindow, session } from "electron";
import { ipcMain } from "electron-typescript-ipc";
import fs from "fs";
import path from "path";
import util from 'util'
import { download } from "electron-dl";
import { NsisUpdater } from "electron-updater";
// Or MacUpdater, AppImageUpdater

export default class AppUpdater {
  constructor() {
    const options = {
      requestHeaders: {
        // Any request headers to include here
      },
      provider: "generic",
      url: "https://example.com/auto-updates",
    };

    // const autoUpdater = new NsisUpdater(options);
    // autoUpdater.addAuthHeader(`Bearer ${token}`)
    // autoUpdater.checkForUpdatesAndNotify();
  }
}
// import DownloadManager from "electron-download-manager";

// DownloadManager.

import dotenv from "dotenv";
dotenv.config();
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).

declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}

import { spawn, exec, execFileSync, execFile } from "child_process";
import { Api, DownloadProps } from "../tools/ElectronApi";
// import { checkDates, getDownloadDS, searchScenes } from "../backend/usgs-api";
import type { ISceneState, RunArgs, USGSLayerType } from "../actions/main-actions";
import { FsWatcher } from "../backend/fs-watcher";
import type { INetworkSettings } from "../ui/network-settings/network-settings-state";
import { applyProxySettings } from "./proxy-settings";
import { SettingsChema, store } from "../backend/settings-store";
import { isNumber } from "lodash";

const fsWatcher = new FsWatcher(app);

const createWindow = async () => {
  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: Object.assign(
        {
          "Content-Security-Policy": [
            "style-src-elem 'https://api.mapbox.com' 'unsafe-inline'",
          ],
        },
        details.responseHeaders
      ),
    });
  });
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    title: "USGS Loader",
    height: 600,
    titleBarStyle: "hidden",
    // resizable: false,
    // roundedCorners: true,
    // frame: false,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      webSecurity: false,
    },
  });
  fsWatcher.setMainWindow(mainWindow);

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  const userSettingsPath = path.join(
    app.getPath("userData"),
    ".networkSettings"
  );
  // Open the DevTools.
  // mainWindow.webContents.openDevTools();

  ipcMain.handle<Api>("watchNetworkSettings", async () => {
    const userSettingsPath = path.join(
      app.getPath("userData"),
      ".networkSettings"
    );
    if (fs.existsSync(userSettingsPath)) {
      const settings = fs.readFileSync(userSettingsPath).toString();
      return JSON.parse(settings);
    }
    return {};
  });

  ipcMain.handle<Api>("download", async (_, sceneId: string, args: RunArgs) => {
    const publicPath = path.join(
      process.env.APP_DEV ? process.cwd() : process.resourcesPath,
      "public"
    );
    const appdataPath = path.join(app.getPath("userData"), "localStorage");
    const scenePath = path.join(appdataPath, sceneId);
    const calculationProcessPath = path.join(publicPath, "tasks/calculation.exe");
    // const calculationProcess = spawn(calculationProcessPath, ["a", scenePath]);

    const runArgs: string[] = ['--path', `"${scenePath}"`]
    if (args.useQAMask) runArgs.push('--useQAMask')
    if (isNumber(args.emission)) runArgs.push('--emission', args.emission.toString())
    
    
    // const _execFile = util.promisify(execFile);
    // const calcProcess = execFile(calculationProcessPath, runArgs, (err, stdout, stderr) => {
    //   console.log({err, stdout, stderr})
    // })

    // console.log({calcProcess, })

    const calculationProcess = exec(
      `start /wait "Calculation of ${sceneId}" "${calculationProcessPath}" ${runArgs.join(' ')}`,
      (...args: any) => {
        console.log("Calculate", scenePath, JSON.stringify(args, null, 2));
      }
    );

    return `"${calculationProcessPath}" ${runArgs.join(' ')}`;

  });

  ipcMain.handle<Api>(
    "saveNetworkSettings",
    async (_, settings: INetworkSettings) => {
      // const userSettingsPath = path.join(
      //   app.getPath("userData"),
      //   ".networkSettings"
      // );
      // fs.writeFileSync(userSettingsPath, JSON.stringify(settings));
      applyProxySettings(app, mainWindow, settings.proxy);
      // return;
      if (settings.proxy) {
        store.set("proxySettings", settings.proxy);
      } else {
        store.delete("proxySettings");
      }
    }
  );

  ipcMain.handle<Api>("openExplorer", async (_, path_: string) => {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const appdataPath = path.join(app.getPath("userData"), "localStorage");
    spawn(`explorer`, [`/select,"${path.join(appdataPath, path_)}"`], {
      windowsVerbatimArguments: true,
    });
  });

  ipcMain.handle<Api>("watch", async () => {
    return fsWatcher.getState();
  });

  /**
   * remember download url list and may be download immediately
   */
  ipcMain.handle<Api>(
    "addRepo",
    async (_, { displayId, ds }: DownloadProps, alsoDownload: boolean) => {
      const appdataPath = path.join(app.getPath("userData"), "localStorage");
      const scenePath = path.join(appdataPath, displayId);
      if (!fs.existsSync(scenePath)) {
        fs.mkdirSync(scenePath, { recursive: true });
      }
      const indexFilePath = path.join(scenePath, "index.json");
      const sceneState: ISceneState = {
        isRepo: true,
        calculation: 0,
        scenePath,
        donwloadedFiles: Object.assign(
          {},
          ...ds.map((item) => ({
            [item.layerName]: {
              url: item.url,
            },
          }))
        ),
        calculated: false,
      };
      fs.writeFileSync(indexFilePath, JSON.stringify(sceneState, null, 2));
      console.log({ indexFilePath, sceneState });
    }
  );

  ipcMain.handle(
    "getStoreValue",
    (event, key: keyof SettingsChema | string) => {
      return store.get(key);
    }
  );

  ipcMain.handle(
    "setStoreValue",
    (event, key: keyof SettingsChema, value: unknown) => {
      if (!value) {
        store.delete(key);
      }
      return store.set(key, value);
    }
  );

  mainWindow.webContents.session.on(
    "will-download",
    (event, item, webContents) => {
      const fn = item.getFilename().split(".TIF")[0];
      const [dir, type] = fn.split("_T1_");
      const sceneId = dir + "_T1";
      // const sceneState = fsWatcher.getSceneState(sceneId);
      const appdataPath = path.join(app.getPath("userData"), "localStorage");
      const scenePath = path.join(appdataPath, sceneId);
      // 'LC08_L2SP_142021_20220915_20220922_02_T1_QA_PIXEL.tif'
      const layerPath = path.join(scenePath, item.getFilename());
      const indexPath = path.join(scenePath, "index.json");
      if (fs.existsSync(layerPath)) {
        const index: ISceneState = JSON.parse(
          fs.readFileSync(indexPath).toString()
        );
        const { size } = index.donwloadedFiles[type as USGSLayerType];
        if (size !== fs.statSync(layerPath).size) {
          fs.rmSync(layerPath);
        } else {
          event.preventDefault();
          return;
        }
      }
      item.setSavePath(layerPath);
      const totalSize = item.getTotalBytes();
      fsWatcher.setState(sceneId, (prev) => ({
        ...prev,
        donwloadedFiles: {
          ...prev.donwloadedFiles,
          [type]: {
            ...prev.donwloadedFiles[type as USGSLayerType],
            size: totalSize,
          },
        },
      }));
      item.on("updated", (event, state) => {
        if (state === "interrupted") {
          console.log("Download is interrupted but can be resumed");
        } else if (state === "progressing") {
          if (item.isPaused()) {
            console.log("Download is paused");
          } else {
            // console.log(`progress: ${item.getReceivedBytes() / totalSize}`);
          }
        }
      });
      item.once("done", (event, state) => {
        if (state === "completed") {
          console.log("Download successfully");
        } else {
          console.log(`Download failed: ${state}`);
        }
      });
    }
  );

  if (fs.existsSync(userSettingsPath)) {
    // fs.readFile(userSettingsPath, (err, data) => {
    //   if (err) {
    //     app.exit(1);
    //   }
    // const settings = JSON.parse(data.toString()) as INetworkSettings;
    const settings = store.get("proxySettings") as
      | INetworkSettings["proxy"]
      | undefined;
    applyProxySettings(app, mainWindow, settings);
    // });
  }
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
/** window initialization */
app.on("window-all-closed", async () => {
  // eslint-disable-next-line no-constant-condition
  // while (true) {
  //   if (!(await fsWatcher.stillWorking())) {
  //     break;
  //   }
  //   await new Promise((resolve) => setTimeout(resolve, 5000));
  // }
  app.quit();
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
